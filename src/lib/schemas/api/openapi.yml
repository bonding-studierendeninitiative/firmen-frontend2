{
  'openapi': '3.1.0',
  'info':
    {
      'title': 'bonding Firmen API',
      'description': 'Bonding endpoints using OpenAPI 3.0',
      'version': 'v1'
    },
  'servers': [{ 'url': 'http://localhost:8080', 'description': 'Generated server url' }],
  'security': [{ 'Auth0': [] }],
  'tags':
    [
      { 'name': 'Addon Package Templates', 'description': 'Addon Package API' },
      {
        'name': 'Buy Option Controller V2',
        'description': 'Controller for templates of buy options (packages)'
      },
      { 'name': 'Contact Persons', 'description': 'Contact Person API' },
      { 'name': 'Event Buy Option Addon Packages', 'description': 'Addon Package API' },
      { 'name': 'Event Buy Options', 'description': 'Event API' },
      { 'name': 'Event Registrations', 'description': 'Event API' },
      { 'name': 'Event Templates', 'description': 'EventTemplate API' },
      { 'name': 'Events', 'description': 'Event API' },
      { 'name': 'Org Billing Address Templates', 'description': 'Billing Address Template API' },
      { 'name': 'Orgs', 'description': 'Organization API Version 2' },
      { 'name': 'Portrait Logos', 'description': 'Portrait Logo API' },
      { 'name': 'Portrait Templates', 'description': 'Portrait API' }
    ],
  'paths':
    {
      '/api/v2/portrait-template/{portraitTemplateId}':
        {
          'get':
            {
              'tags': ['Portrait Templates'],
              'summary': 'Load portrait template',
              'operationId': 'load',
              'parameters':
                [
                  {
                    'name': 'portraitTemplateId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'responses':
                {
                  '200':
                    {
                      'description': 'Successfully return portrait template details.',
                      'content':
                        {
                          'application/json':
                            { 'schema': { '$ref': '#/components/schemas/PortraitTemplateJSON' } }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            },
          'put':
            {
              'tags': ['Portrait Templates'],
              'summary': 'Updates a portrait template',
              'operationId': 'saveOrUpdatePortrait',
              'parameters':
                [
                  {
                    'name': 'portraitTemplateId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'requestBody':
                {
                  'content':
                    {
                      'application/json':
                        { 'schema': { '$ref': '#/components/schemas/PortraitTemplateInput' } }
                    },
                  'required': true
                },
              'responses':
                {
                  '200':
                    {
                      'description': 'Successfully returns the saved portrait template.',
                      'content':
                        {
                          'application/json':
                            { 'schema': { '$ref': '#/components/schemas/PortraitTemplateJSON' } }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            },
          'delete':
            {
              'tags': ['Portrait Templates'],
              'summary': 'Delete portrait template',
              'operationId': 'deletePortraitTemplate',
              'parameters':
                [
                  {
                    'name': 'portraitTemplateId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'responses':
                {
                  '204':
                    {
                      'description': 'Successfully deleted the portrait template.',
                      'content': { '*/*': { 'schema': {} } }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            }
        },
      '/api/v2/portrait-logo/{portraitLogoId}':
        {
          'get':
            {
              'tags': ['Portrait Logos'],
              'summary': 'Return logo content',
              'operationId': 'getPortraitLogo',
              'parameters':
                [
                  {
                    'name': 'portraitLogoId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'responses':
                {
                  '200':
                    {
                      'description': 'Successfully return the content of logo of a event organization',
                      'content':
                        {
                          'application/octet-stream':
                            { 'schema': { 'type': 'string', 'format': 'binary' } }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            },
          'put':
            {
              'tags': ['Portrait Logos'],
              'summary': 'Update logo content',
              'operationId': 'updatePortraitLogo',
              'parameters':
                [
                  {
                    'name': 'portraitLogoId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'requestBody':
                {
                  'content':
                    {
                      'multipart/form-data':
                        {
                          'schema':
                            {
                              'type': 'object',
                              'properties': { 'file': { 'type': 'string', 'format': 'binary' } },
                              'required': ['file']
                            }
                        }
                    }
                },
              'responses':
                {
                  '200':
                    {
                      'description': 'Successfully return the content of a portrait logo',
                      'content':
                        {
                          'application/json':
                            {
                              'schema': { '$ref': '#/components/schemas/UploadPortraitLogoOutput' }
                            }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            },
          'delete':
            {
              'tags': ['Portrait Logos'],
              'summary': 'Delete a portrait logo',
              'operationId': 'deletePortraitLogo',
              'parameters':
                [
                  {
                    'name': 'portraitLogoId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'responses':
                {
                  '204':
                    {
                      'description': 'Succeeded',
                      'content': { 'application/json': { 'schema': {} } }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            }
        },
      '/api/v2/organization/{organizationId}':
        {
          'get':
            {
              'tags': ['Orgs'],
              'summary': 'Get details for a organization',
              'operationId': 'getOrganizationDetails',
              'parameters':
                [
                  {
                    'name': 'organizationId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'responses':
                {
                  '200':
                    {
                      'description': 'OK',
                      'content':
                        {
                          'application/json':
                            { 'schema': { '$ref': '#/components/schemas/OrganizationOutput' } }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            },
          'put':
            {
              'tags': ['Orgs'],
              'summary': 'Update organization details',
              'operationId': 'updateOrganization',
              'parameters':
                [
                  {
                    'name': 'organizationId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'requestBody':
                {
                  'content':
                    {
                      'application/json':
                        { 'schema': { '$ref': '#/components/schemas/UpdateOrganizationInput' } }
                    },
                  'required': true
                },
              'responses':
                {
                  '200':
                    {
                      'description': 'OK',
                      'content':
                        {
                          'application/json':
                            { 'schema': { '$ref': '#/components/schemas/OrganizationOutput' } }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            }
        },
      '/api/v2/organization/{organizationId}/billing-address-template/{billingAddressTemplateId}':
        {
          'get':
            {
              'tags': ['Org Billing Address Templates'],
              'summary': 'Get a billing address template',
              'operationId': 'getBillingAddressTemplate',
              'parameters':
                [
                  {
                    'name': 'billingAddressTemplateId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  },
                  {
                    'name': 'organizationId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'responses':
                {
                  '200':
                    {
                      'description': 'Successfully get a billing address template.',
                      'content':
                        {
                          'application/json':
                            {
                              'schema':
                                { '$ref': '#/components/schemas/BillingAddressTemplateJSON' }
                            }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            },
          'put':
            {
              'tags': ['Org Billing Address Templates'],
              'summary': 'Edit a billing address template',
              'operationId': 'editBillingAddressTemplate',
              'parameters':
                [
                  {
                    'name': 'billingAddressTemplateId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  },
                  {
                    'name': 'organizationId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'requestBody':
                {
                  'content':
                    {
                      'application/json':
                        {
                          'schema':
                            { '$ref': '#/components/schemas/EditBillingAddressTemplateInput' }
                        }
                    },
                  'required': true
                },
              'responses':
                {
                  '200':
                    {
                      'description': 'Successfully edited a billing address template.',
                      'content':
                        {
                          'application/json':
                            {
                              'schema':
                                { '$ref': '#/components/schemas/BillingAddressTemplateJSON' }
                            }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            },
          'delete':
            {
              'tags': ['Org Billing Address Templates'],
              'summary': 'Delete a billing address template',
              'operationId': 'deleteBillingAddressTemplate',
              'parameters':
                [
                  {
                    'name': 'billingAddressTemplateId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  },
                  {
                    'name': 'organizationId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'responses':
                {
                  '204':
                    {
                      'description': 'Successfully deleted a billing address template.',
                      'content': { 'application/json': { 'schema': {} } }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            }
        },
      '/api/v2/event/{eventId}/buy-option':
        {
          'get':
            {
              'tags': ['Event Buy Options'],
              'summary': 'Get all Buy Options of an Event',
              'operationId': 'getEventBuysOption',
              'parameters':
                [
                  {
                    'name': 'eventId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  },
                  {
                    'name': 'sortDirection',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'string', 'default': 'asc' }
                  },
                  {
                    'name': 'sortBy',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'string', 'default': 'createdAt' }
                  },
                  {
                    'name': 'page',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'integer', 'format': 'int32', 'default': 0 }
                  },
                  {
                    'name': 'size',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'integer', 'format': 'int32', 'default': 10 }
                  }
                ],
              'responses':
                {
                  '200':
                    {
                      'description': 'Successfully returns the buy options of this event.',
                      'content':
                        {
                          'application/json':
                            {
                              'schema': { '$ref': '#/components/schemas/GetEventBuyOptionsOutput' }
                            }
                        }
                    }
                }
            },
          'put':
            {
              'tags': ['Event Buy Options'],
              'summary': 'Set Buy Option of an Event',
              'description': "Sets the Buy Option of an Event. A Buy option is only a template for a combination of packages.\nSo when adding a buy option to an event. The contents of the package are copied to the event.\nTherefore a buy option is not part of the event and there is no remove function for it.\nTo undo the action, one must delete all Packages individually from the event.",
              'operationId': 'updateBuyOptions',
              'parameters':
                [
                  {
                    'name': 'eventId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'requestBody':
                {
                  'content':
                    {
                      'application/json':
                        { 'schema': { '$ref': '#/components/schemas/SetBuyOptionsInput' } }
                    },
                  'required': true
                },
              'responses':
                {
                  '200':
                    {
                      'description': 'Successfully returns the event with the specified ID.',
                      'content':
                        {
                          'application/json':
                            { 'schema': { '$ref': '#/components/schemas/UpdateBuyOptionsOutput' } }
                        }
                    }
                },
              'deprecated': true
            },
          'post':
            {
              'tags': ['Event Buy Options'],
              'summary': 'Create a Buy Options of an Event',
              'operationId': 'createEventBuyOption',
              'parameters':
                [
                  {
                    'name': 'eventId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'requestBody':
                {
                  'content':
                    {
                      'application/json':
                        { 'schema': { '$ref': '#/components/schemas/CreateEventBuyOptionInput' } }
                    },
                  'required': true
                },
              'responses':
                {
                  '201':
                    {
                      'description': 'Successfully created the buy option..',
                      'content':
                        {
                          'application/json':
                            { 'schema': { '$ref': '#/components/schemas/GetEventBuyOptionOutput' } }
                        }
                    }
                }
            }
        },
      '/api/v2/event/{eventId}/buy-option/{buyOptionId}':
        {
          'get':
            {
              'tags': ['Event Buy Options'],
              'summary': 'Get a Buy Options of an Event',
              'operationId': 'getEventBuyOption',
              'parameters':
                [
                  {
                    'name': 'eventId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  },
                  {
                    'name': 'buyOptionId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'responses':
                {
                  '200':
                    {
                      'description': 'Successfully returns the buy option of this event.',
                      'content':
                        {
                          'application/json':
                            { 'schema': { '$ref': '#/components/schemas/GetEventBuyOptionOutput' } }
                        }
                    }
                }
            },
          'put':
            {
              'tags': ['Event Buy Options'],
              'summary': 'Updates a buy Option of an Event',
              'operationId': 'updateBuyOption',
              'parameters':
                [
                  {
                    'name': 'eventId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  },
                  {
                    'name': 'buyOptionId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'requestBody':
                {
                  'content':
                    {
                      'application/json':
                        { 'schema': { '$ref': '#/components/schemas/UpdateEventBuyOptionInput' } }
                    },
                  'required': true
                },
              'responses':
                {
                  '200':
                    {
                      'description': 'Successfully returns the event with the specified ID.',
                      'content':
                        {
                          'application/json':
                            { 'schema': { '$ref': '#/components/schemas/GetEventBuyOptionOutput' } }
                        }
                    }
                }
            },
          'delete':
            {
              'tags': ['Event Buy Options'],
              'summary': 'Delete a Buy Options of an Event',
              'operationId': 'deleteEventBuyOption',
              'parameters':
                [
                  {
                    'name': 'buyOptionId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  },
                  {
                    'name': 'eventId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'responses':
                {
                  '204':
                    {
                      'description': 'Successfully deleted the buy option..',
                      'content': { '*/*': { 'schema': {} } }
                    }
                }
            }
        },
      '/api/v2/event/{eventId}/buy-option/{buyOptionId}/addon-package/{addonPackageId}':
        {
          'get':
            {
              'tags': ['Event Buy Option Addon Packages'],
              'summary': 'Retrieve addon package templates',
              'description': 'This method retrieves the details of a specific addon package template',
              'operationId': 'getAddonPackage',
              'parameters':
                [
                  {
                    'name': 'addonPackageId',
                    'in': 'path',
                    'description': 'The ID of the addon package template to retrieve',
                    'required': true,
                    'schema': { 'type': 'string' }
                  },
                  {
                    'name': 'includeAddons',
                    'in': 'query',
                    'description': 'Whether to include addons in the response',
                    'required': false,
                    'schema': { 'type': 'boolean', 'default': false }
                  },
                  {
                    'name': 'buyOptionId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  },
                  {
                    'name': 'eventId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'responses':
                {
                  '200':
                    {
                      'description': 'OK',
                      'content':
                        {
                          '*/*':
                            { 'schema': { '$ref': '#/components/schemas/GetAddonPackageOutput' } }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            },
          'put':
            {
              'tags': ['Event Buy Option Addon Packages'],
              'summary': 'Edit addon package template',
              'description': 'This method allows the user to edit an existing addon package template',
              'operationId': 'editAddonPackage',
              'parameters':
                [
                  {
                    'name': 'eventId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  },
                  {
                    'name': 'buyOptionId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  },
                  {
                    'name': 'addonPackageId',
                    'in': 'path',
                    'description': 'The ID of the addon package to edit',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'requestBody':
                {
                  'description': 'The new details of the addon package template',
                  'content':
                    {
                      'application/json':
                        { 'schema': { '$ref': '#/components/schemas/EditAddonPackageInput' } }
                    },
                  'required': true
                },
              'responses':
                {
                  '200':
                    {
                      'description': 'OK',
                      'content':
                        {
                          'application/json':
                            { 'schema': { '$ref': '#/components/schemas/EditAddonPackageOutput' } }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            },
          'delete':
            {
              'tags': ['Event Buy Option Addon Packages'],
              'summary': 'Delete addon package template',
              'description': 'This method allows the user to delete an existing addon package template',
              'operationId': 'deleteAddonPackage',
              'parameters':
                [
                  {
                    'name': 'addonPackageId',
                    'in': 'path',
                    'description': 'The ID of the addon package to delete',
                    'required': true,
                    'schema': { 'type': 'string' }
                  },
                  {
                    'name': 'buyOptionId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  },
                  {
                    'name': 'eventId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'responses':
                {
                  '204':
                    {
                      'description': 'The addon package template was successfully deleted',
                      'content': { 'application/json': { 'schema': {} } }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            }
        },
      '/api/v2/event-template/{eventTemplateId}':
        {
          'get':
            {
              'tags': ['Event Templates'],
              'summary': 'Gets an event template',
              'operationId': 'getEventTemplate',
              'parameters':
                [
                  {
                    'name': 'eventTemplateId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'responses':
                {
                  '200':
                    {
                      'description': 'OK',
                      'content':
                        {
                          'application/json':
                            { 'schema': { '$ref': '#/components/schemas/EventTemplateOutput' } }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                },
              'deprecated': true
            },
          'put':
            {
              'tags': ['Event Templates'],
              'summary': 'Updates Event Template',
              'operationId': 'updateEventTemplate',
              'parameters':
                [
                  {
                    'name': 'eventTemplateId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'requestBody':
                {
                  'content':
                    {
                      'application/json':
                        { 'schema': { '$ref': '#/components/schemas/UpdateEventTemplateInput' } }
                    },
                  'required': true
                },
              'responses':
                {
                  '200':
                    {
                      'description': 'OK',
                      'content':
                        {
                          'application/json':
                            { 'schema': { '$ref': '#/components/schemas/EventTemplateOutput' } }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                },
              'deprecated': true
            },
          'delete':
            {
              'tags': ['Event Templates'],
              'summary': 'Deletes an Event Template',
              'operationId': 'deleteEventTemplate',
              'parameters':
                [
                  {
                    'name': 'eventTemplateId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'responses':
                {
                  '204':
                    {
                      'description': 'Successful',
                      'content': { 'application/json': { 'schema': {} } }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                },
              'deprecated': true
            }
        },
      '/api/v2/contact-person':
        {
          'put':
            {
              'tags': ['Contact Persons'],
              'summary': 'Edit a contact person',
              'operationId': 'editContactPerson',
              'requestBody':
                {
                  'content':
                    {
                      'application/json':
                        { 'schema': { '$ref': '#/components/schemas/EditContactPersonInput' } }
                    },
                  'required': true
                },
              'responses':
                {
                  '200':
                    {
                      'description': 'Successfully edited a contact person.',
                      'content':
                        {
                          'application/json':
                            {
                              'schema':
                                { '$ref': '#/components/schemas/GetContactPersonDetailsOutput' }
                            }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            },
          'post':
            {
              'tags': ['Contact Persons'],
              'summary': 'Registers a user as a contact person',
              'operationId': 'registerUserAsContactPerson',
              'requestBody':
                {
                  'content':
                    {
                      'application/json':
                        { 'schema': { '$ref': '#/components/schemas/RegisterUserInput' } }
                    },
                  'required': true
                },
              'responses':
                {
                  '201':
                    {
                      'description': 'Successfully added contact person.',
                      'content':
                        {
                          'application/json':
                            {
                              'schema':
                                { '$ref': '#/components/schemas/GetContactPersonDetailsOutput' }
                            }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            }
        },
      '/api/v2/buy-option/{buyOptionId}':
        {
          'get':
            {
              'tags': ['Buy Option Controller V2'],
              'summary': 'Get details of buy option',
              'description': 'Get details of buy option',
              'operationId': 'getBuyOptionDetails',
              'parameters':
                [
                  {
                    'name': 'buyOptionId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'responses':
                {
                  '200':
                    {
                      'description': 'OK',
                      'content':
                        {
                          'application/json':
                            { 'schema': { '$ref': '#/components/schemas/BuyOptionJSONV2' } }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                },
              'deprecated': true
            },
          'put':
            {
              'tags': ['Buy Option Controller V2'],
              'summary': 'Updates an existing buy option',
              'description': 'Updates an existing buy option',
              'operationId': 'updateBuyOption_1',
              'parameters':
                [
                  {
                    'name': 'buyOptionId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'requestBody':
                {
                  'content':
                    {
                      'application/json':
                        { 'schema': { '$ref': '#/components/schemas/BuyOptionInputV2' } }
                    },
                  'required': true
                },
              'responses':
                {
                  '200':
                    {
                      'description': 'Updated',
                      'content':
                        {
                          'application/json':
                            { 'schema': { '$ref': '#/components/schemas/BuyOptionJSONV2' } }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                },
              'deprecated': true
            },
          'delete':
            {
              'tags': ['Buy Option Controller V2'],
              'summary': 'Deletes a buy option',
              'operationId': 'deleteBuyOption',
              'parameters':
                [
                  {
                    'name': 'buyOptionId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'responses':
                {
                  '204':
                    {
                      'description': 'Success',
                      'content': { 'application/json': { 'schema': {} } }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                },
              'deprecated': true
            }
        },
      '/api/v2/addon-package-template/{addonPackageTemplateId}':
        {
          'get':
            {
              'tags': ['Addon Package Templates'],
              'summary': 'Retrieve addon package templates',
              'description': 'This method retrieves the details of a specific addon package template',
              'operationId': 'getAddonPackageTemplate',
              'parameters':
                [
                  {
                    'name': 'addonPackageTemplateId',
                    'in': 'path',
                    'description': 'The ID of the addon package template to retrieve',
                    'required': true,
                    'schema': { 'type': 'string' }
                  },
                  {
                    'name': 'includeAddons',
                    'in': 'query',
                    'description': 'Whether to include addons in the response',
                    'required': false,
                    'schema': { 'type': 'boolean', 'default': false }
                  }
                ],
              'responses':
                {
                  '200':
                    {
                      'description': 'OK',
                      'content':
                        {
                          '*/*':
                            {
                              'schema':
                                { '$ref': '#/components/schemas/GetAddonPackageTemplateOutput' }
                            }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                },
              'deprecated': true
            },
          'put':
            {
              'tags': ['Addon Package Templates'],
              'summary': 'Edit addon package template',
              'description': 'This method allows the user to edit an existing addon package template',
              'operationId': 'editAddonPackageTemplate',
              'parameters':
                [
                  {
                    'name': 'addonPackageTemplateId',
                    'in': 'path',
                    'description': 'The ID of the addon package to edit',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'requestBody':
                {
                  'description': 'The new details of the addon package template',
                  'content':
                    {
                      'application/json':
                        {
                          'schema': { '$ref': '#/components/schemas/EditAddonPackageTemplateInput' }
                        }
                    },
                  'required': true
                },
              'responses':
                {
                  '200':
                    {
                      'description': 'OK',
                      'content':
                        {
                          'application/json':
                            {
                              'schema':
                                { '$ref': '#/components/schemas/EditAddonPackageTemplateOutput' }
                            }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                },
              'deprecated': true
            },
          'delete':
            {
              'tags': ['Addon Package Templates'],
              'summary': 'Delete addon package template',
              'description': 'This method allows the user to delete an existing addon package template',
              'operationId': 'deleteAddonPackageTemplate',
              'parameters':
                [
                  {
                    'name': 'addonPackageTemplateId',
                    'in': 'path',
                    'description': 'The ID of the addon package to delete',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'responses':
                {
                  '204':
                    {
                      'description': 'The addon package template was successfully deleted',
                      'content': { 'application/json': { 'schema': {} } }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                },
              'deprecated': true
            }
        },
      '/api/v2/portrait-template':
        {
          'get':
            {
              'tags': ['Portrait Templates'],
              'summary': 'Get all portrait templates for an organization',
              'operationId': 'getPortraitTemplatesForOrganization',
              'parameters':
                [
                  {
                    'name': 'organizationId',
                    'in': 'query',
                    'required': true,
                    'schema': { 'type': 'string' }
                  },
                  {
                    'name': 'page',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'integer', 'format': 'int32', 'default': 0 }
                  },
                  {
                    'name': 'limit',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'integer', 'format': 'int32', 'default': 10 }
                  },
                  {
                    'name': 'sortBy',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'string', 'default': 'createdAt' }
                  },
                  {
                    'name': 'sortDirection',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'string', 'default': 'asc' }
                  }
                ],
              'responses':
                {
                  '200':
                    {
                      'description': 'OK',
                      'content':
                        {
                          'application/json':
                            {
                              'schema':
                                {
                                  '$ref': '#/components/schemas/GetPortraitTemplatesByOrgnizationOutput'
                                }
                            }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            },
          'post':
            {
              'tags': ['Portrait Templates'],
              'summary': 'Create a new portrait template',
              'operationId': 'saveOrUpdatePortrait_1',
              'parameters':
                [
                  {
                    'name': 'organizationId',
                    'in': 'query',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'requestBody':
                {
                  'content':
                    {
                      'application/json':
                        { 'schema': { '$ref': '#/components/schemas/PortraitTemplateInput' } }
                    },
                  'required': true
                },
              'responses':
                {
                  '200':
                    {
                      'description': 'Successfully returns the saved portrait template.',
                      'content':
                        {
                          'application/json':
                            { 'schema': { '$ref': '#/components/schemas/PortraitTemplateJSON' } }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            }
        },
      '/api/v2/portrait-logo':
        {
          'get':
            {
              'tags': ['Portrait Logos'],
              'summary': 'Get all portrait logos for this organization',
              'operationId': 'getPortraitLogosForOrganization',
              'parameters':
                [
                  {
                    'name': 'organizationId',
                    'in': 'query',
                    'required': true,
                    'schema': { 'type': 'string' }
                  },
                  {
                    'name': 'page',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'integer', 'format': 'int32', 'default': 0 }
                  },
                  {
                    'name': 'limit',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'integer', 'format': 'int32', 'default': 10 }
                  },
                  {
                    'name': 'sortBy',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'string', 'default': 'createdAt' }
                  },
                  {
                    'name': 'sortDirection',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'string', 'default': 'asc' }
                  }
                ],
              'responses':
                {
                  '200':
                    {
                      'description': 'OK',
                      'content':
                        {
                          'application/json':
                            {
                              'schema':
                                {
                                  '$ref': '#/components/schemas/GetPortraitLogosForOrganizationOutput'
                                }
                            }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            },
          'post':
            {
              'tags': ['Portrait Logos'],
              'summary': 'Create logo content',
              'operationId': 'createPortraitLogo',
              'requestBody':
                {
                  'content':
                    {
                      'multipart/form-data':
                        {
                          'schema':
                            {
                              'type': 'object',
                              'properties': { 'file': { 'type': 'string', 'format': 'binary' } },
                              'required': ['file']
                            }
                        }
                    }
                },
              'responses':
                {
                  '201':
                    {
                      'description': 'Successfully return the content of logo of a event organization',
                      'content':
                        {
                          'application/json':
                            {
                              'schema': { '$ref': '#/components/schemas/CreatePortraitLogoOutput' }
                            }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            }
        },
      '/api/v2/organization':
        {
          'get':
            {
              'tags': ['Orgs'],
              'summary': 'Gets all organizations',
              'description': 'Queries all organizations in the system and returns them as a paged result',
              'operationId': 'getAllOrganizations',
              'parameters':
                [
                  {
                    'name': 'page',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'integer', 'format': 'int32', 'default': 0 }
                  },
                  {
                    'name': 'limit',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'integer', 'format': 'int32', 'default': 10 }
                  },
                  {
                    'name': 'sortBy',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'string', 'default': 'name' }
                  },
                  {
                    'name': 'sortDirection',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'string', 'default': 'asc' }
                  }
                ],
              'responses':
                {
                  '200':
                    {
                      'description': 'OK',
                      'content':
                        {
                          'application/json':
                            {
                              'schema': { '$ref': '#/components/schemas/GetAllOrganizationsOutput' }
                            }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            },
          'post':
            {
              'tags': ['Orgs'],
              'summary': 'Create a new organization',
              'operationId': 'createOrganization',
              'requestBody':
                {
                  'content':
                    {
                      'application/json':
                        { 'schema': { '$ref': '#/components/schemas/Auth0OrganizationInput' } }
                    },
                  'required': true
                },
              'responses':
                {
                  '200':
                    {
                      'description': 'OK',
                      'content':
                        {
                          'application/json':
                            {
                              'schema': { '$ref': '#/components/schemas/CreateOrganizationOutput' }
                            }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            }
        },
      '/api/v2/organization/{organizationId}/billing-address-template':
        {
          'get':
            {
              'tags': ['Org Billing Address Templates'],
              'summary': 'Get all billing address template of a organization',
              'operationId': 'getBillingAddressTemplatesByOrganization',
              'parameters':
                [
                  {
                    'name': 'organizationId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  },
                  {
                    'name': 'page',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'integer', 'format': 'int32', 'default': 0 }
                  },
                  {
                    'name': 'size',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'integer', 'format': 'int32', 'default': 10 }
                  },
                  {
                    'name': 'sortDirection',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'string', 'default': 'asc' }
                  },
                  {
                    'name': 'sortBy',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'string', 'default': 'createdAt' }
                  }
                ],
              'responses':
                {
                  '200':
                    {
                      'description': 'OK',
                      'content':
                        {
                          'application/json':
                            {
                              'schema':
                                { '$ref': '#/components/schemas/GetBillingAddressTemplatesOutput' }
                            }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            },
          'post':
            {
              'tags': ['Org Billing Address Templates'],
              'summary': 'Add a billing address template',
              'operationId': 'addBillingAddressTemplate',
              'parameters':
                [
                  {
                    'name': 'organizationId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'requestBody':
                {
                  'content':
                    {
                      'application/json':
                        {
                          'schema':
                            { '$ref': '#/components/schemas/AddBillingAddressTemplateInput' }
                        }
                    },
                  'required': true
                },
              'responses':
                {
                  '200':
                    {
                      'description': 'Successfully added a billing address template.',
                      'content':
                        {
                          'application/json':
                            {
                              'schema':
                                { '$ref': '#/components/schemas/BillingAddressTemplateJSON' }
                            }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            }
        },
      '/api/v2/organization/{organizationId}/billing-address-template/{billingAddressTemplateId}/make-default':
        {
          'post':
            {
              'tags': ['Org Billing Address Templates'],
              'summary': 'Set this billing address template as the default',
              'description': 'Sets the default billing address template for a organization.',
              'operationId': 'setBillingAddressTemplate',
              'parameters':
                [
                  {
                    'name': 'organizationId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  },
                  {
                    'name': 'billingAddressTemplateId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'responses':
                {
                  '204':
                    {
                      'description': 'Successfully set the default billing address template.',
                      'content': { '*/*': { 'schema': {} } }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            }
        },
      '/api/v2/organization/create-invite':
        {
          'post':
            {
              'tags': ['Orgs'],
              'summary': 'Create an invite for a new person',
              'operationId': 'createInvite',
              'requestBody':
                {
                  'content':
                    {
                      'application/json':
                        { 'schema': { '$ref': '#/components/schemas/GenerateInviteInput' } }
                    },
                  'required': true
                },
              'responses':
                {
                  '200':
                    {
                      'description': 'Successfully created an invite.',
                      'content':
                        {
                          'application/json':
                            { 'schema': { '$ref': '#/components/schemas/GenerateInviteOutput' } }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            }
        },
      '/api/v2/organization/accept-invite':
        {
          'post':
            {
              'tags': ['Orgs'],
              'summary': 'Accept Invite for User',
              'operationId': 'acceptInvite',
              'requestBody':
                {
                  'content':
                    {
                      'application/json':
                        { 'schema': { '$ref': '#/components/schemas/AcceptInviteInput' } }
                    },
                  'required': true
                },
              'responses':
                {
                  '200':
                    {
                      'description': 'Successfully accepted join code.',
                      'content': { 'application/json': { 'schema': {} } }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            }
        },
      '/api/v2/event/{eventId}/publish':
        {
          'post':
            {
              'tags': ['Events'],
              'summary': 'Publish an Event',
              'description': 'Publishes an Event',
              'operationId': 'publishEvent',
              'parameters':
                [
                  {
                    'name': 'eventId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'responses':
                {
                  '204':
                    {
                      'description': 'Successfully published the Event.',
                      'content': { '*/*': { 'schema': {} } }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            }
        },
      '/api/v2/event/{eventId}/buy-option/{buyOptionId}/addon-package':
        {
          'get':
            {
              'tags': ['Event Buy Option Addon Packages'],
              'summary': 'Retrieve all addon package templates',
              'description': 'This method retrieves all addon package template',
              'operationId': 'getAllAddonPackages',
              'parameters':
                [
                  {
                    'name': 'eventId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  },
                  {
                    'name': 'buyOptionId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  },
                  {
                    'name': 'page',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'integer', 'format': 'int32', 'default': 0 }
                  },
                  {
                    'name': 'limit',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'integer', 'format': 'int32', 'default': 10 }
                  },
                  {
                    'name': 'sortBy',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'string', 'default': 'title' }
                  },
                  {
                    'name': 'sortDirection',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'string', 'default': 'asc' }
                  }
                ],
              'responses':
                {
                  '200':
                    {
                      'description': 'OK',
                      'content':
                        {
                          'application/json':
                            {
                              'schema': { '$ref': '#/components/schemas/GetAllAddonPackagesOutput' }
                            }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            },
          'post':
            {
              'tags': ['Event Buy Option Addon Packages'],
              'summary': 'Add a new addon package template',
              'description': 'This method allows the user to add a new addon package template',
              'operationId': 'addAddonPackage',
              'parameters':
                [
                  {
                    'name': 'eventId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  },
                  {
                    'name': 'buyOptionId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'requestBody':
                {
                  'content':
                    {
                      'application/json':
                        { 'schema': { '$ref': '#/components/schemas/AddAddonPackageInput' } }
                    },
                  'required': true
                },
              'responses':
                {
                  '201':
                    {
                      'description': 'Created',
                      'content':
                        {
                          'application/json':
                            { 'schema': { '$ref': '#/components/schemas/AddAddonPackageOutput' } }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            }
        },
      '/api/v2/event/{eventId}/buy-option/{buyOptionId}/activate':
        {
          'post':
            {
              'tags': ['Event Buy Options'],
              'summary': 'Activate the buy options for this event.',
              'operationId': 'activateEventBuyOption',
              'parameters':
                [
                  {
                    'name': 'eventId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  },
                  {
                    'name': 'buyOptionId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'responses':
                {
                  '204':
                    {
                      'description': 'Successfully activated the buy option..',
                      'content': { '*/*': { 'schema': {} } }
                    }
                }
            }
        },
      '/api/v2/event-template':
        {
          'get':
            {
              'tags': ['Event Templates'],
              'summary': 'Gets all event templates',
              'description': 'Queries all event templates in the system and returns them as a paged result',
              'operationId': 'getAllEventTemplates',
              'parameters':
                [
                  {
                    'name': 'page',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'integer', 'format': 'int32', 'default': 0 }
                  },
                  {
                    'name': 'limit',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'integer', 'format': 'int32', 'default': 10 }
                  },
                  {
                    'name': 'sortBy',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'string', 'default': 'name' }
                  },
                  {
                    'name': 'sortDirection',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'string', 'default': 'asc' }
                  }
                ],
              'responses':
                {
                  '200':
                    {
                      'description': 'OK',
                      'content':
                        {
                          'application/json':
                            {
                              'schema': { '$ref': '#/components/schemas/GetAllEventTemplateOutput' }
                            }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                },
              'deprecated': true
            },
          'post':
            {
              'tags': ['Event Templates'],
              'summary': 'Create a new Event Template',
              'operationId': 'createEventTemplate',
              'requestBody':
                {
                  'content':
                    {
                      'application/json':
                        { 'schema': { '$ref': '#/components/schemas/CreateEventTemplateInput' } }
                    },
                  'required': true
                },
              'responses':
                {
                  '200':
                    {
                      'description': 'OK',
                      'content':
                        {
                          'application/json':
                            { 'schema': { '$ref': '#/components/schemas/EventTemplateOutput' } }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                },
              'deprecated': true
            }
        },
      '/api/v2/event-registration':
        {
          'get':
            {
              'tags': ['Event Registrations'],
              'summary': 'Get all event registrations for a organization',
              'operationId': 'getEventRegistrationsForOrganization',
              'parameters':
                [
                  {
                    'name': 'organizationId',
                    'in': 'query',
                    'required': true,
                    'schema': { 'type': 'string' }
                  },
                  {
                    'name': 'page',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'integer', 'format': 'int32', 'default': 0 }
                  },
                  {
                    'name': 'limit',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'integer', 'format': 'int32', 'default': 10 }
                  },
                  {
                    'name': 'sortBy',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'string', 'default': 'createdAt' }
                  },
                  {
                    'name': 'sortDirection',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'string', 'default': 'asc' }
                  }
                ],
              'responses':
                {
                  '200':
                    {
                      'description': 'OK',
                      'content':
                        {
                          'application/json':
                            {
                              'schema':
                                {
                                  '$ref': '#/components/schemas/GetEventRegistrationForOrganizationOutput'
                                }
                            }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            },
          'post':
            {
              'tags': ['Event Registrations'],
              'summary': 'Register a organization and contact person to an event (preliminarily)',
              'description': 'The registration is preliminary. Packages and addon packages are checked against the currently available packages in the event.',
              'operationId': 'registerOrganizationToEvent',
              'requestBody':
                {
                  'content':
                    {
                      'application/json':
                        {
                          'schema':
                            { '$ref': '#/components/schemas/RegisterOrganizationToEventInput' }
                        }
                    },
                  'required': true
                },
              'responses':
                {
                  '201':
                    {
                      'description': 'Successfully registered organization to event',
                      'content':
                        {
                          'application/json':
                            {
                              'schema':
                                { '$ref': '#/components/schemas/RegisterOrganizationToEventOutput' }
                            }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            }
        },
      '/api/v2/event-registration/{eventRegistrationId}/withdraw':
        {
          'post':
            {
              'tags': ['Event Registrations'],
              'summary': 'Withdraw an event registration',
              'operationId': 'withdraw',
              'parameters':
                [
                  {
                    'name': 'eventRegistrationId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'responses':
                {
                  '204':
                    {
                      'description': 'Successfully withdrawn an event registration',
                      'content': { 'application/json': { 'schema': {} } }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            }
        },
      '/api/v2/event-registration/{eventRegistrationId}/portrait/submit':
        {
          'post':
            {
              'tags': ['Event Registrations'],
              'summary': 'Submit the portrait',
              'operationId': 'submitPortrait',
              'parameters':
                [
                  {
                    'name': 'eventRegistrationId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'requestBody':
                {
                  'content':
                    {
                      'application/json':
                        { 'schema': { '$ref': '#/components/schemas/SubmitPortraitInput' } }
                    },
                  'required': true
                },
              'responses':
                {
                  '204':
                    {
                      'description': 'Successfully submitted the portrait',
                      'content': { 'application/json': { 'schema': {} } }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            }
        },
      '/api/v2/event-registration/{eventRegistrationId}/portrait/request-changes':
        {
          'post':
            {
              'tags': ['Event Registrations'],
              'summary': 'Request changes to the portrait',
              'operationId': 'requestPortraitChanges',
              'parameters':
                [
                  {
                    'name': 'eventRegistrationId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'requestBody':
                {
                  'content':
                    {
                      'application/json':
                        { 'schema': { '$ref': '#/components/schemas/RequestPortraitChangeInput' } }
                    },
                  'required': true
                },
              'responses':
                {
                  '204':
                    {
                      'description': 'Successfully rejected the portrait',
                      'content': { 'application/json': { 'schema': {} } }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            }
        },
      '/api/v2/event-registration/{eventRegistrationId}/portrait/reject':
        {
          'post':
            {
              'tags': ['Event Registrations'],
              'summary': 'Reject the portrait',
              'operationId': 'rejectPortrait',
              'parameters':
                [
                  {
                    'name': 'eventRegistrationId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'requestBody':
                {
                  'content':
                    {
                      'application/json':
                        { 'schema': { '$ref': '#/components/schemas/RejectPortraitInput' } }
                    },
                  'required': true
                },
              'responses':
                {
                  '204':
                    {
                      'description': 'Successfully rejected the portrait',
                      'content': { 'application/json': { 'schema': {} } }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            }
        },
      '/api/v2/event-registration/{eventRegistrationId}/portrait/confirm':
        {
          'post':
            {
              'tags': ['Event Registrations'],
              'summary': 'Confirm a portrait',
              'operationId': 'confirmPortrait',
              'parameters':
                [
                  {
                    'name': 'eventRegistrationId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'responses':
                {
                  '204':
                    {
                      'description': 'Successfully confirmed portrait',
                      'content': { 'application/json': { 'schema': {} } }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            }
        },
      '/api/v2/event-registration/{eventRegistrationId}/logo/request-changes':
        {
          'post':
            {
              'tags': ['Event Registrations'],
              'summary': 'Request changes to the logo',
              'operationId': 'requestLogoChanges',
              'parameters':
                [
                  {
                    'name': 'eventRegistrationId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'requestBody':
                {
                  'content':
                    {
                      'application/json':
                        { 'schema': { '$ref': '#/components/schemas/RequestLogoChangeInput' } }
                    },
                  'required': true
                },
              'responses':
                {
                  '204':
                    {
                      'description': 'Successfully rejected the logo',
                      'content': { 'application/json': { 'schema': {} } }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            }
        },
      '/api/v2/event-registration/{eventRegistrationId}/logo/reject':
        {
          'post':
            {
              'tags': ['Event Registrations'],
              'summary': 'Reject the logo associated with an event registration',
              'operationId': 'rejectLogo',
              'parameters':
                [
                  {
                    'name': 'eventRegistrationId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'requestBody':
                {
                  'content':
                    {
                      'application/json':
                        { 'schema': { '$ref': '#/components/schemas/RejectLogoInput' } }
                    },
                  'required': true
                },
              'responses':
                {
                  '204':
                    {
                      'description': 'Successfully reject the logo',
                      'content': { 'application/json': { 'schema': {} } }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            }
        },
      '/api/v2/event-registration/{eventRegistrationId}/logo/confirm':
        {
          'post':
            {
              'tags': ['Event Registrations'],
              'summary': 'Confirm an logo',
              'operationId': 'confirmLogo',
              'parameters':
                [
                  {
                    'name': 'eventRegistrationId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'responses':
                {
                  '204':
                    {
                      'description': 'Successfully confirmed portrait',
                      'content': { 'application/json': { 'schema': {} } }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            }
        },
      '/api/v2/event-registration/{eventRegistrationId}/confirm':
        {
          'post':
            {
              'tags': ['Event Registrations'],
              'summary': 'Confirm an event registration',
              'operationId': 'confirmEventRegistration',
              'parameters':
                [
                  {
                    'name': 'eventRegistrationId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'responses':
                {
                  '204':
                    {
                      'description': 'Successfully confirmed event registration',
                      'content': { 'application/json': { 'schema': {} } }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            }
        },
      '/api/v2/event-registration/{eventRegistrationId}/advertisement/request-changes':
        {
          'post':
            {
              'tags': ['Event Registrations'],
              'summary': 'Request changes to the advertisement',
              'operationId': 'requestAdvertisementChanges',
              'parameters':
                [
                  {
                    'name': 'eventRegistrationId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'requestBody':
                {
                  'content':
                    {
                      'application/json':
                        {
                          'schema':
                            { '$ref': '#/components/schemas/RequestAdvertisementChangeInput' }
                        }
                    },
                  'required': true
                },
              'responses':
                {
                  '204':
                    {
                      'description': 'Successfully rejected the advertisement',
                      'content': { 'application/json': { 'schema': {} } }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            }
        },
      '/api/v2/event-registration/{eventRegistrationId}/advertisement/reject':
        {
          'post':
            {
              'tags': ['Event Registrations'],
              'summary': 'Reject the advertisement associated with an event registration',
              'operationId': 'rejectAdvertisement',
              'parameters':
                [
                  {
                    'name': 'eventRegistrationId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'requestBody':
                {
                  'content':
                    {
                      'application/json':
                        { 'schema': { '$ref': '#/components/schemas/RejectAdvertisementInput' } }
                    },
                  'required': true
                },
              'responses':
                {
                  '204':
                    {
                      'description': 'Successfully reject the advertisement',
                      'content': { 'application/json': { 'schema': {} } }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            }
        },
      '/api/v2/event-registration/{eventRegistrationId}/advertisement/confirm':
        {
          'post':
            {
              'tags': ['Event Registrations'],
              'summary': 'Confirm an advertisement',
              'operationId': 'confirmAdvertisement',
              'parameters':
                [
                  {
                    'name': 'eventRegistrationId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'responses':
                {
                  '204':
                    {
                      'description': 'Successfully confirmed portrait',
                      'content': { 'application/json': { 'schema': {} } }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            }
        },
      '/api/v2/buy-option':
        {
          'get':
            {
              'tags': ['Buy Option Controller V2'],
              'summary': 'Get all buy options',
              'operationId': 'getBuyOptions',
              'parameters':
                [
                  {
                    'name': 'page',
                    'in': 'query',
                    'description': 'Page number',
                    'required': false,
                    'schema': { 'type': 'integer', 'format': 'int32', 'default': 0 }
                  },
                  {
                    'name': 'size',
                    'in': 'query',
                    'description': 'Page size',
                    'required': false,
                    'schema': { 'type': 'integer', 'format': 'int32', 'default': 10 }
                  },
                  {
                    'name': 'sortDirection',
                    'in': 'query',
                    'description': 'Sort direction',
                    'required': false,
                    'schema': { 'type': 'string', 'default': 'asc' }
                  },
                  {
                    'name': 'sortBy',
                    'in': 'query',
                    'description': 'Sort by',
                    'required': false,
                    'schema': { 'type': 'string', 'default': 'createdAt' }
                  }
                ],
              'responses':
                {
                  '200':
                    {
                      'description': 'OK',
                      'content':
                        {
                          'application/json':
                            { 'schema': { '$ref': '#/components/schemas/GetBuyOptionsOutput' } }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                },
              'deprecated': true
            },
          'post':
            {
              'tags': ['Buy Option Controller V2'],
              'summary': 'Create a new buy option',
              'description': 'Create a new buy option',
              'operationId': 'createBuyOption',
              'requestBody':
                {
                  'content':
                    {
                      'application/json':
                        { 'schema': { '$ref': '#/components/schemas/CreateBuyOptionInput' } }
                    },
                  'required': true
                },
              'responses':
                {
                  '201':
                    {
                      'description': 'Created',
                      'content':
                        {
                          'application/json':
                            { 'schema': { '$ref': '#/components/schemas/BuyOptionJSONV2' } }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                },
              'deprecated': true
            }
        },
      '/api/v2/addon-package-template':
        {
          'get':
            {
              'tags': ['Addon Package Templates'],
              'summary': 'Retrieve all addon package templates',
              'description': 'This method retrieves all addon package template',
              'operationId': 'getAllAddonPackageTemplates',
              'parameters':
                [
                  {
                    'name': 'page',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'integer', 'format': 'int32', 'default': 0 }
                  },
                  {
                    'name': 'limit',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'integer', 'format': 'int32', 'default': 10 }
                  },
                  {
                    'name': 'sortBy',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'string', 'default': 'title' }
                  },
                  {
                    'name': 'sortDirection',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'string', 'default': 'asc' }
                  }
                ],
              'responses':
                {
                  '200':
                    {
                      'description': 'OK',
                      'content':
                        {
                          'application/json':
                            {
                              'schema':
                                { '$ref': '#/components/schemas/GetAllAddonPackageTemplatesOutput' }
                            }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                },
              'deprecated': true
            },
          'post':
            {
              'tags': ['Addon Package Templates'],
              'summary': 'Add a new addon package template',
              'description': 'This method allows the user to add a new addon package template',
              'operationId': 'addAddonPackageTemplate',
              'requestBody':
                {
                  'content':
                    {
                      'application/json':
                        { 'schema': { '$ref': '#/components/schemas/AddonPackageTemplateInput' } }
                    },
                  'required': true
                },
              'responses':
                {
                  '201':
                    {
                      'description': 'Created',
                      'content':
                        {
                          'application/json':
                            {
                              'schema':
                                { '$ref': '#/components/schemas/AddAddonPackageTemplateOutput' }
                            }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                },
              'deprecated': true
            }
        },
      '/api/v2/organization/{organizationId}/members':
        {
          'get':
            {
              'tags': ['Orgs'],
              'summary': 'Pages all members (incl. admins and owners) of a organization',
              'operationId': 'getMembers',
              'parameters':
                [
                  {
                    'name': 'organizationId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  },
                  {
                    'name': 'page',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'integer', 'format': 'int32', 'default': 0 }
                  },
                  {
                    'name': 'pageSize',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'integer', 'format': 'int32', 'default': 20 }
                  }
                ],
              'responses':
                {
                  '200':
                    {
                      'description': 'Successfully retrieved the members.',
                      'content':
                        {
                          'application/json':
                            { 'schema': { '$ref': '#/components/schemas/GetMembersOutput' } }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            }
        },
      '/api/v2/event':
        {
          'get':
            {
              'tags': ['Events'],
              'summary': 'Load all events',
              'operationId': 'loadAll',
              'parameters':
                [
                  {
                    'name': 'sortDirection',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'string', 'default': 'asc' }
                  },
                  {
                    'name': 'event_status',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'string', 'enum': ['UNPUBLISHED', 'PUBLISHED', 'ARCHIVED'] }
                  },
                  {
                    'name': 'page',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'integer', 'format': 'int32', 'default': 0 }
                  },
                  {
                    'name': 'size',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'integer', 'format': 'int32', 'default': 10 }
                  }
                ],
              'responses':
                {
                  '200':
                    {
                      'description': 'Successfully returns a list of all events.',
                      'content':
                        {
                          'application/json':
                            { 'schema': { '$ref': '#/components/schemas/AllEventsOutput' } }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            }
        },
      '/api/v2/event/{eventId}':
        {
          'get':
            {
              'tags': ['Events'],
              'summary': 'Load event by ID',
              'operationId': 'loadEventById',
              'parameters':
                [
                  {
                    'name': 'eventId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'responses':
                {
                  '200':
                    {
                      'description': 'Successfully returns the event with the specified ID.',
                      'content':
                        {
                          'application/json':
                            { 'schema': { '$ref': '#/components/schemas/EventJSON' } }
                        }
                    },
                  '404':
                    {
                      'description': 'Event with the specified ID not found.',
                      'content':
                        {
                          'application/json':
                            { 'schema': { '$ref': '#/components/schemas/EventJSON' } }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            }
        },
      '/api/v2/event/{eventId}/event_registrations':
        {
          'get':
            {
              'tags': ['Events'],
              'summary': 'Load Event Registrations for Event',
              'operationId': 'loadEventRegistrationsForEvent',
              'parameters':
                [
                  {
                    'name': 'eventId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  },
                  {
                    'name': 'page',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'integer', 'format': 'int32', 'default': 0 }
                  },
                  {
                    'name': 'size',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'integer', 'format': 'int32', 'default': 10 }
                  },
                  {
                    'name': 'sortDirection',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'string', 'default': 'asc' }
                  },
                  {
                    'name': 'sortBy',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'string', 'default': 'createdAt' }
                  }
                ],
              'responses':
                {
                  '200':
                    {
                      'description': 'Successfully returns the event registrations for the specified event.',
                      'content':
                        {
                          'application/json':
                            {
                              'schema':
                                {
                                  '$ref': '#/components/schemas/GetEventRegistrationsForEventOutput'
                                }
                            }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            }
        },
      '/api/v2/event/{eventId}/buy-option/active':
        {
          'get':
            {
              'tags': ['Event Buy Options'],
              'summary': 'Get the buy option for this event that is set to active/published.',
              'operationId': 'activeEventBuyOption',
              'parameters':
                [
                  {
                    'name': 'eventId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'responses':
                {
                  '200':
                    {
                      'description': 'The active buy option.',
                      'content':
                        {
                          '*/*':
                            { 'schema': { '$ref': '#/components/schemas/GetEventBuyOptionOutput' } }
                        }
                    }
                }
            }
        },
      '/api/v2/event-registration/{eventRegistrationId}':
        {
          'get':
            {
              'tags': ['Event Registrations'],
              'summary': 'Get an event registration',
              'operationId': 'getEventRegistration',
              'parameters':
                [
                  {
                    'name': 'eventRegistrationId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'responses':
                {
                  '200':
                    {
                      'description': 'OK',
                      'content':
                        {
                          'application/json':
                            {
                              'schema':
                                { '$ref': '#/components/schemas/GetEventRegistrationOutput' }
                            }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            }
        },
      '/api/v2/contact-person/{contactPersonId}':
        {
          'get':
            {
              'tags': ['Contact Persons'],
              'summary': 'Get contact person details',
              'operationId': 'getContactPerson',
              'parameters':
                [
                  {
                    'name': 'contactPersonId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'responses':
                {
                  '200':
                    {
                      'description': 'The contact person details.',
                      'content':
                        {
                          'application/json':
                            {
                              'schema':
                                { '$ref': '#/components/schemas/GetContactPersonDetailsOutput' }
                            }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            },
          'delete':
            {
              'tags': ['Contact Persons'],
              'summary': 'Delete a contact person',
              'operationId': 'deleteBillingAddressTemplate_1',
              'parameters':
                [
                  {
                    'name': 'contactPersonId',
                    'in': 'path',
                    'required': true,
                    'schema': { 'type': 'string' }
                  }
                ],
              'responses':
                {
                  '200':
                    {
                      'description': 'Successfully deleted a contact person.',
                      'content':
                        {
                          'application/json':
                            { 'schema': { '$ref': '#/components/schemas/JsonResponse' } }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            }
        },
      '/api/v2/contact-person/my-details':
        {
          'get':
            {
              'tags': ['Contact Persons'],
              'summary': 'Get own contact person details',
              'operationId': 'getOwnContactPerson',
              'responses':
                {
                  '200':
                    {
                      'description': 'The contact person details.',
                      'content':
                        {
                          'application/json':
                            {
                              'schema':
                                { '$ref': '#/components/schemas/GetContactPersonDetailsOutput' }
                            }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            }
        },
      '/api/v2/contact-person/memberships':
        {
          'get':
            {
              'tags': ['Contact Persons'],
              'summary': 'Get my org memberships',
              'operationId': 'getOrgMemberships',
              'parameters':
                [
                  {
                    'name': 'page',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'integer', 'format': 'int32', 'default': 0 }
                  },
                  {
                    'name': 'limit',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'integer', 'format': 'int32', 'default': 10 }
                  },
                  {
                    'name': 'sortBy',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'string', 'default': 'orgMembershipType' }
                  },
                  {
                    'name': 'sortDirection',
                    'in': 'query',
                    'required': false,
                    'schema': { 'type': 'string', 'default': 'asc' }
                  }
                ],
              'responses':
                {
                  '200':
                    {
                      'description': 'OK',
                      'content':
                        {
                          'application/json':
                            { 'schema': { '$ref': '#/components/schemas/GetOrgMembershipsOutput' } }
                        }
                    },
                  '403':
                    {
                      'description': 'Forbidden.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '500':
                    {
                      'description': 'Internal server error.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '401':
                    {
                      'description': 'Unauthorized, could be missing authorization header.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '400':
                    {
                      'description': 'Bad request, most probably due to malformed request syntax.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    },
                  '422':
                    {
                      'description': 'Unprocessable Entity, which means that the syntax of the request entity is correct, but server was unable to process it.',
                      'content':
                        {
                          'application/problem+json':
                            { 'schema': { '$ref': '#/components/schemas/Problem' } }
                        }
                    }
                }
            }
        }
    },
  'components':
    {
      'schemas':
        {
          'PortraitTemplateJSON':
            {
              'properties':
                {
                  'id': { 'type': 'string' },
                  'title': { 'type': 'string' },
                  'comment': { 'type': 'string' },
                  'industry': { 'type': 'string' },
                  'products': { 'type': 'string' },
                  'locations_worldwide': { 'type': 'string' },
                  'locations_europe': { 'type': 'string' },
                  'locations_germany': { 'type': 'string' },
                  'revenue_worldwide': { 'type': 'string' },
                  'revenue_europe': { 'type': 'string' },
                  'revenue_germany': { 'type': 'string' },
                  'employees_worldwide': { 'type': 'string' },
                  'employees_europe': { 'type': 'string' },
                  'employees_germany': { 'type': 'string' },
                  'graduates': { 'type': 'string' },
                  'desiredDisciplines': { 'type': 'string' },
                  'entryOptions': { 'type': 'string' },
                  'offersThesis': { 'type': 'boolean' },
                  'offersOutOfCountryWork': { 'type': 'boolean' },
                  'offersInternships': { 'type': 'boolean' },
                  'contactAddress': { 'type': 'string' },
                  'contactPersonStudents': { 'type': 'string' },
                  'contactPersonGraduates': { 'type': 'string' },
                  'website': { 'type': 'string' },
                  'additionalInformation': { 'type': 'string' },
                  'displayName': { 'type': 'string' },
                  'modifiedAt': { 'type': 'string', 'format': 'date-time' },
                  'createdAt': { 'type': 'string', 'format': 'date-time' }
                }
            },
          'PortraitTemplateInput':
            {
              'properties':
                {
                  'title': { 'type': 'string' },
                  'comment': { 'type': 'string' },
                  'industry': { 'type': 'string' },
                  'products': { 'type': 'string' },
                  'locations_worldwide': { 'type': 'string' },
                  'locations_europe': { 'type': 'string' },
                  'locations_germany': { 'type': 'string' },
                  'revenue_worldwide': { 'type': 'string' },
                  'revenue_europe': { 'type': 'string' },
                  'revenue_germany': { 'type': 'string' },
                  'employees_worldwide': { 'type': 'string' },
                  'employees_europe': { 'type': 'string' },
                  'employees_germany': { 'type': 'string' },
                  'graduates': { 'type': 'string' },
                  'desiredDisciplines': { 'type': 'string' },
                  'entryOptions': { 'type': 'string' },
                  'offersThesis': { 'type': 'boolean' },
                  'offersOutOfCountryWork': { 'type': 'boolean' },
                  'offersInternships': { 'type': 'boolean' },
                  'contactAddress': { 'type': 'string' },
                  'contactPersonStudents': { 'type': 'string' },
                  'contactPersonGraduates': { 'type': 'string' },
                  'website': { 'type': 'string' },
                  'additionalInformation': { 'type': 'string' },
                  'displayName': { 'type': 'string' }
                },
              'required':
                [
                  'additionalInformation',
                  'comment',
                  'contactAddress',
                  'contactPersonGraduates',
                  'contactPersonStudents',
                  'desiredDisciplines',
                  'displayName',
                  'employees_europe',
                  'employees_germany',
                  'employees_worldwide',
                  'entryOptions',
                  'graduates',
                  'industry',
                  'locations_europe',
                  'locations_germany',
                  'locations_worldwide',
                  'offersInternships',
                  'offersOutOfCountryWork',
                  'offersThesis',
                  'products',
                  'revenue_europe',
                  'revenue_germany',
                  'revenue_worldwide',
                  'title',
                  'website'
                ]
            },
          'Problem':
            {
              'properties':
                {
                  'parameters': { 'type': 'object', 'additionalProperties': {} },
                  'instance': { 'type': 'string', 'format': 'uri' },
                  'type': { 'type': 'string', 'format': 'uri' },
                  'detail': { 'type': 'string' },
                  'status': { '$ref': '#/components/schemas/StatusType' },
                  'title': { 'type': 'string' }
                }
            },
          'StatusType':
            {
              'properties':
                {
                  'reasonPhrase': { 'type': 'string' },
                  'statusCode': { 'type': 'integer', 'format': 'int32' }
                }
            },
          'UploadPortraitLogoOutput':
            { 'properties': { 'organizationLogoId': { 'type': 'string' } } },
          'OrganizationAddressInput':
            {
              'properties':
                {
                  'street': { 'type': 'string' },
                  'extendedAddress': { 'type': 'string' },
                  'country': { 'type': 'string' },
                  'zipCode': { 'type': 'string' },
                  'locality': { 'type': 'string' }
                },
              'required': ['country', 'extendedAddress', 'locality', 'street', 'zipCode']
            },
          'OrganizationOutput':
            {
              'properties':
                {
                  'id': { 'type': 'string' },
                  'slug': { 'type': 'string' },
                  'name': { 'type': 'string' },
                  'organizationEmail': { 'type': 'string' },
                  'organizationPhone': { 'type': 'string' },
                  'organizationWebsite': { 'type': 'string' },
                  'defaultBillingAddressId': { 'type': 'string' },
                  'organizationAddress':
                    { '$ref': '#/components/schemas/OrganizationAddressInput' },
                  'createdAt': { 'type': 'string', 'format': 'date-time' },
                  'modifiedAt': { 'type': 'string', 'format': 'date-time' },
                  'organizationType': { 'type': 'string' }
                }
            },
          'UpdateOrganizationInput':
            {
              'properties':
                {
                  'name': { 'type': 'string' },
                  'organizationEmail': { 'type': 'string' },
                  'organizationPhone': { 'type': 'string' },
                  'organizationWebsite': { 'type': 'string' },
                  'defaultBillingAddressID': { 'type': 'string' },
                  'organizationAddress': { '$ref': '#/components/schemas/OrganizationAddressInput' }
                },
              'required':
                [
                  'defaultBillingAddressID',
                  'name',
                  'organizationAddress',
                  'organizationEmail',
                  'organizationPhone',
                  'organizationWebsite'
                ]
            },
          'BillingAddressTemplateJSON':
            {
              'properties':
                {
                  'id': { 'type': 'string' },
                  'organizationID': { 'type': 'string' },
                  'street': { 'type': 'string' },
                  'country': { 'type': 'string' },
                  'zipCode': { 'type': 'string' },
                  'city': { 'type': 'string' },
                  'vat': { 'type': 'string' },
                  'billingReference': { 'type': 'string' },
                  'organizationName': { 'type': 'string' }
                }
            },
          'EditBillingAddressTemplateInput':
            {
              'properties':
                {
                  'street': { 'type': 'string' },
                  'country': { 'type': 'string' },
                  'zipCode': { 'type': 'string' },
                  'city': { 'type': 'string' },
                  'vat': { 'type': 'string' },
                  'billingReference': { 'type': 'string' },
                  'organizationName': { 'type': 'string' }
                }
            },
          'BuyOptionOutput':
            {
              'properties':
                {
                  'packages':
                    {
                      'type': 'array',
                      'items': { '$ref': '#/components/schemas/PackageV3Output' }
                    },
                  'services':
                    { 'type': 'array', 'items': { '$ref': '#/components/schemas/ServiceOutput' } },
                  'name': { 'type': 'string' }
                }
            },
          'PackageBenefitOutput':
            {
              'properties':
                {
                  'stringValue': { 'type': 'string' },
                  'numericValue': { 'type': 'integer', 'format': 'int32' },
                  'booleanValue': { 'type': 'boolean' }
                }
            },
          'PackageV3Output':
            {
              'properties':
                {
                  'id': { 'type': 'string' },
                  'name': { 'type': 'string' },
                  'price': { 'type': 'integer', 'format': 'int32' },
                  'benefits':
                    {
                      'type': 'array',
                      'items': { '$ref': '#/components/schemas/PackageBenefitOutput' }
                    }
                }
            },
          'ServiceOutput':
            {
              'properties':
                {
                  'name': { 'type': 'string' },
                  'description': { 'type': 'string' },
                  'valueType': { 'type': 'string' }
                }
            },
          'UpdateBuyOptionsOutput':
            {
              'properties':
                {
                  'eventId': { 'type': 'string' },
                  'buyOptions':
                    { 'type': 'array', 'items': { '$ref': '#/components/schemas/BuyOptionOutput' } }
                }
            },
          'BuyOptionInput':
            {
              'properties':
                {
                  'packages':
                    { 'type': 'array', 'items': { '$ref': '#/components/schemas/PackageInput' } },
                  'services':
                    { 'type': 'array', 'items': { '$ref': '#/components/schemas/ServiceInput' } },
                  'name': { 'type': 'string' }
                },
              'required': ['name']
            },
          'PackageBenefitInput':
            {
              'properties':
                {
                  'numericValue': { 'type': 'integer', 'format': 'int32' },
                  'stringValue': { 'type': 'string' },
                  'booleanValue': { 'type': 'boolean' }
                }
            },
          'PackageInput':
            {
              'properties':
                {
                  'name': { 'type': 'string' },
                  'price': { 'type': 'integer', 'format': 'int32' },
                  'benefits':
                    {
                      'type': 'array',
                      'items': { '$ref': '#/components/schemas/PackageBenefitInput' }
                    }
                },
              'required': ['benefits', 'name', 'price']
            },
          'ServiceInput':
            {
              'properties':
                {
                  'name': { 'type': 'string' },
                  'description': { 'type': 'string' },
                  'valueType': { 'type': 'string', 'enum': ['STRING', 'INTEGER', 'BOOLEAN'] }
                },
              'required': ['name', 'valueType']
            },
          'SetBuyOptionsInput':
            {
              'properties':
                {
                  'buyOptions':
                    { 'type': 'array', 'items': { '$ref': '#/components/schemas/BuyOptionInput' } }
                },
              'required': ['buyOptions']
            },
          'GetEventBuyOptionOutput':
            {
              'properties':
                {
                  'id': { 'type': 'string' },
                  'name': { 'type': 'string' },
                  'packages':
                    {
                      'type': 'array',
                      'items': { '$ref': '#/components/schemas/PackageV3Output' }
                    },
                  'services':
                    { 'type': 'array', 'items': { '$ref': '#/components/schemas/ServiceOutput' } },
                  'active': { 'type': 'boolean' }
                }
            },
          'UpdateEventBuyOptionInput':
            {
              'properties':
                {
                  'packages':
                    { 'type': 'array', 'items': { '$ref': '#/components/schemas/PackageInput' } },
                  'services':
                    { 'type': 'array', 'items': { '$ref': '#/components/schemas/ServiceInput' } },
                  'name': { 'type': 'string' }
                },
              'required': ['name']
            },
          'AddonOutput':
            {
              'properties':
                {
                  'id': { 'type': 'string' },
                  'title': { 'type': 'string' },
                  'price': { 'type': 'integer', 'format': 'int32' },
                  'label': { 'type': 'string' }
                }
            },
          'AddonPackageOutput':
            {
              'properties':
                {
                  'id': { 'type': 'string' },
                  'purchasable': { 'type': 'boolean' },
                  'description': { 'type': 'string' },
                  'title': { 'type': 'string' },
                  'price': { 'type': 'integer', 'format': 'int32' },
                  'label': { 'type': 'string' },
                  'addons':
                    {
                      'type': 'array',
                      'items': { '$ref': '#/components/schemas/AddonOutput' },
                      'uniqueItems': true
                    }
                }
            },
          'EditAddonPackageOutput':
            {
              'properties':
                { 'savedAddonPackage': { '$ref': '#/components/schemas/AddonPackageOutput' } }
            },
          'AddonInput':
            {
              'properties':
                {
                  'title': { 'type': 'string', 'example': 'Buswerbung' },
                  'description':
                    { 'type': 'string', 'example': 'Ihr Logo auf Bussen in campusnähe' },
                  'price': { 'type': 'integer', 'format': 'int32', 'example': 10000 },
                  'label': { 'type': 'string', 'example': 'exklusiv' }
                },
              'required': ['description', 'label', 'price', 'title']
            },
          'EditAddonPackageInput':
            {
              'properties':
                {
                  'eventId': { 'type': 'string' },
                  'buyOptionId': { 'type': 'string' },
                  'addonPackageId': { 'type': 'string' },
                  'purchasable': { 'type': 'boolean' },
                  'title': { 'type': 'string' },
                  'label': { 'type': 'string' },
                  'description': { 'type': 'string' },
                  'price': { 'type': 'integer', 'format': 'int32' },
                  'addons':
                    { 'type': 'array', 'items': { '$ref': '#/components/schemas/AddonInput' } }
                },
              'required':
                [
                  'addonPackageId',
                  'addons',
                  'buyOptionId',
                  'description',
                  'eventId',
                  'label',
                  'price',
                  'purchasable',
                  'title'
                ]
            },
          'AddonPackageTemplateOutput':
            {
              'properties':
                {
                  'id': { 'type': 'string' },
                  'purchasable': { 'type': 'boolean' },
                  'description': { 'type': 'string' },
                  'title': { 'type': 'string' },
                  'price': { 'type': 'integer', 'format': 'int32' },
                  'label': { 'type': 'string' },
                  'addons':
                    {
                      'type': 'array',
                      'items': { '$ref': '#/components/schemas/AddonTemplateOutput' },
                      'uniqueItems': true
                    }
                }
            },
          'AddonTemplateOutput':
            {
              'properties':
                {
                  'id': { 'type': 'string' },
                  'title': { 'type': 'string' },
                  'label': { 'type': 'string' },
                  'description': { 'type': 'string' },
                  'price': { 'type': 'integer', 'format': 'int32' }
                }
            },
          'BuyOptionJSONV2':
            {
              'properties':
                {
                  'id': { 'type': 'string' },
                  'name': { 'type': 'string' },
                  'packages':
                    {
                      'type': 'array',
                      'items': { '$ref': '#/components/schemas/PackageTemplateJSON' }
                    },
                  'services':
                    {
                      'type': 'array',
                      'items': { '$ref': '#/components/schemas/PackageItemTemplateJSON' }
                    },
                  'createdAt': { 'type': 'string', 'format': 'date-time' },
                  'modifiedAt': { 'type': 'string', 'format': 'date-time' }
                }
            },
          'EventTemplateOutput':
            {
              'properties':
                {
                  'id': { 'type': 'string' },
                  'name': { 'type': 'string' },
                  'description': { 'type': 'string' },
                  'buyOptions': { '$ref': '#/components/schemas/BuyOptionJSONV2' },
                  'addons':
                    {
                      'type': 'array',
                      'items': { '$ref': '#/components/schemas/AddonPackageTemplateOutput' }
                    },
                  'createdAt': { 'type': 'string', 'format': 'date-time' },
                  'modifiedAt': { 'type': 'string', 'format': 'date-time' }
                }
            },
          'PackageItemTemplateJSON':
            {
              'properties':
                {
                  'id': { 'type': 'string' },
                  'valueType': { 'type': 'string', 'enum': ['STRING', 'INTEGER', 'BOOLEAN'] },
                  'packageValues':
                    {
                      'type': 'array',
                      'items': { '$ref': '#/components/schemas/PackageItemTemplateValueJSON' }
                    }
                }
            },
          'PackageItemTemplateValueJSON':
            {
              'properties':
                {
                  'id': { 'type': 'string' },
                  'packageName': { 'type': 'string' },
                  'value': { 'type': 'string' }
                }
            },
          'PackageTemplateJSON':
            {
              'properties':
                {
                  'id': { 'type': 'string' },
                  'name': { 'type': 'string' },
                  'price': { 'type': 'integer', 'format': 'int32' }
                }
            },
          'UpdateEventTemplateInput':
            {
              'properties':
                {
                  'name': { 'type': 'string' },
                  'description': { 'type': 'string' },
                  'buyOptionID': { 'type': 'string' },
                  'addonIDs': { 'type': 'array', 'items': { 'type': 'string' } }
                },
              'required': ['addonIDs', 'buyOptionID', 'description', 'name']
            },
          'GetContactPersonDetailsOutput':
            {
              'properties':
                {
                  'contactPersonId': { 'type': 'string' },
                  'email': { 'type': 'string' },
                  'firstName': { 'type': 'string' },
                  'lastName': { 'type': 'string' },
                  'title': { 'type': 'string' },
                  'phoneNumber': { 'type': 'string' },
                  'responsibility': { 'type': 'string' },
                  'organization': { '$ref': '#/components/schemas/OrganizationOutputLight' },
                  'createdAt': { 'type': 'string', 'format': 'date-time' },
                  'modifiedAt': { 'type': 'string', 'format': 'date-time' }
                }
            },
          'OrganizationOutputLight':
            {
              'properties':
                {
                  'id': { 'type': 'string' },
                  'name': { 'type': 'string' },
                  'slug': { 'type': 'string' },
                  'createdAt': { 'type': 'string', 'format': 'date-time' },
                  'modifiedAt': { 'type': 'string', 'format': 'date-time' }
                }
            },
          'EditContactPersonInput':
            {
              'properties':
                {
                  'firstName': { 'type': 'string' },
                  'lastName': { 'type': 'string' },
                  'email': { 'type': 'string' },
                  'id': { 'type': 'string' },
                  'title': { 'type': 'string' },
                  'phoneNumber': { 'type': 'string' },
                  'responsibility': { 'type': 'string' },
                  'redirectUri': { 'type': 'string', 'example': 'https://google.com' }
                },
              'required':
                [
                  'email',
                  'firstName',
                  'id',
                  'lastName',
                  'phoneNumber',
                  'redirectUri',
                  'responsibility',
                  'title'
                ]
            },
          'BuyOptionInputV2':
            {
              'properties':
                {
                  'name': { 'type': 'string' },
                  'packages':
                    {
                      'type': 'array',
                      'items': { '$ref': '#/components/schemas/PackageTemplateInput' }
                    },
                  'services':
                    {
                      'type': 'array',
                      'items': { '$ref': '#/components/schemas/PackageItemTemplateInput' }
                    }
                },
              'required': ['name', 'packages', 'services']
            },
          'PackageItemTemplateInput':
            {
              'properties':
                {
                  'id': { 'type': 'string' },
                  'valueType': { 'type': 'string', 'enum': ['STRING', 'INTEGER', 'BOOLEAN'] },
                  'name': { 'type': 'string' },
                  'packageValues':
                    {
                      'type': 'array',
                      'items': { '$ref': '#/components/schemas/PackageItemTemplateValuesInput' }
                    }
                },
              'required': ['name', 'packageValues', 'valueType']
            },
          'PackageItemTemplateValuesInput':
            {
              'properties':
                {
                  'id': { 'type': 'string' },
                  'packageName': { 'type': 'string' },
                  'value': { 'type': 'string' }
                },
              'required': ['packageName', 'value']
            },
          'PackageTemplateInput':
            {
              'properties':
                {
                  'id': { 'type': 'string' },
                  'name': { 'type': 'string' },
                  'price': { 'type': 'integer', 'format': 'int32' }
                },
              'required': ['name', 'price']
            },
          'EditAddonPackageTemplateOutput':
            {
              'properties':
                {
                  'savedAddonPackage': { '$ref': '#/components/schemas/AddonPackageTemplateOutput' }
                }
            },
          'AddonTemplateInput':
            {
              'properties':
                {
                  'title': { 'type': 'string', 'example': 'Buswerbung' },
                  'label': { 'type': 'string', 'example': 'exklusiv' },
                  'description':
                    {
                      'type': 'string',
                      'example': 'Ihr Logo platziert auf einer der beliebtesten Buslinien am Campus'
                    },
                  'price': { 'type': 'integer', 'format': 'int32', 'example': 100000 }
                },
              'required': ['description', 'label', 'title']
            },
          'EditAddonPackageTemplateInput':
            {
              'properties':
                {
                  'addonPackageTemplateId': { 'type': 'string' },
                  'purchasable': { 'type': 'boolean' },
                  'title': { 'type': 'string' },
                  'label': { 'type': 'string' },
                  'description': { 'type': 'string' },
                  'price': { 'type': 'integer', 'format': 'int32' },
                  'addonTemplates':
                    {
                      'type': 'array',
                      'items': { '$ref': '#/components/schemas/AddonTemplateInput' }
                    }
                },
              'required':
                [
                  'addonPackageTemplateId',
                  'addonTemplates',
                  'description',
                  'label',
                  'price',
                  'purchasable',
                  'title'
                ]
            },
          'CreatePortraitLogoOutput': { 'properties': { 'portraitLogoId': { 'type': 'string' } } },
          'CreateOrganizationOutput':
            {
              'properties':
                {
                  'createdOrganization': { '$ref': '#/components/schemas/OrganizationOutput' },
                  'creator': { 'type': 'string' }
                }
            },
          'Auth0OrganizationInput':
            {
              'properties':
                {
                  'name': { 'type': 'string', 'maxLength': 30, 'minLength': 3 },
                  'size': { 'type': 'string' },
                  'type': { 'type': 'string' },
                  'phone': { 'type': 'string' },
                  'email': { 'type': 'string' },
                  'streetAddress': { 'type': 'string' },
                  'extendedAddress': { 'type': 'string' },
                  'zipCode': { 'type': 'string' },
                  'locality': { 'type': 'string' },
                  'countryCode': { 'type': 'string' }
                },
              'required':
                [
                  'countryCode',
                  'email',
                  'extendedAddress',
                  'locality',
                  'name',
                  'phone',
                  'size',
                  'streetAddress',
                  'type',
                  'zipCode'
                ]
            },
          'AddBillingAddressTemplateInput':
            {
              'properties':
                {
                  'street': { 'type': 'string' },
                  'country': { 'type': 'string' },
                  'zipCode': { 'type': 'string' },
                  'city': { 'type': 'string' },
                  'vat': { 'type': 'string' },
                  'billingReference': { 'type': 'string' },
                  'organizationName': { 'type': 'string' }
                },
              'required':
                [
                  'billingReference',
                  'city',
                  'country',
                  'organizationName',
                  'street',
                  'vat',
                  'zipCode'
                ]
            },
          'GenerateInviteOutput':
            {
              'properties':
                {
                  'id': { 'type': 'string' },
                  'organizationSlug': { 'type': 'string' },
                  'userMail': { 'type': 'string' }
                }
            },
          'GenerateInviteInput':
            {
              'properties':
                {
                  'organizationSlug': { 'type': 'string' },
                  'userMail': { 'type': 'string' },
                  'redirectURL': { 'type': 'string' }
                },
              'required': ['organizationSlug', 'redirectURL', 'userMail']
            },
          'AcceptInviteInput':
            {
              'properties':
                { 'organizationSlug': { 'type': 'string' }, 'joinCode': { 'type': 'string' } },
              'required': ['joinCode', 'organizationSlug']
            },
          'CreateEventBuyOptionInput':
            {
              'properties':
                {
                  'packageCount': { 'type': 'integer', 'format': 'int32' },
                  'serviceCount': { 'type': 'integer', 'format': 'int32' },
                  'name': { 'type': 'string' }
                },
              'required': ['name']
            },
          'AddAddonPackageOutput':
            {
              'properties':
                { 'savedAddonPackage': { '$ref': '#/components/schemas/AddonPackageOutput' } }
            },
          'AddAddonPackageInput':
            {
              'properties': { 'addonPackage': { '$ref': '#/components/schemas/AddonPackageInput' } }
            },
          'AddonPackageInput':
            {
              'properties':
                {
                  'purchasable': { 'type': 'boolean', 'example': true },
                  'title': { 'type': 'string', 'example': 'Printwerbung' },
                  'price': { 'type': 'integer', 'format': 'int32', 'example': 250000 },
                  'description':
                    { 'type': 'string', 'example': 'Effektive Werbung im Bereich des Campus' },
                  'label': { 'type': 'string', 'example': '-15%' },
                  'addons':
                    { 'type': 'array', 'items': { '$ref': '#/components/schemas/AddonInput' } }
                },
              'required': ['addons', 'label', 'purchasable', 'title']
            },
          'CreateEventTemplateInput':
            {
              'properties':
                {
                  'name': { 'type': 'string' },
                  'description': { 'type': 'string' },
                  'buyOptionID': { 'type': 'string' },
                  'addonIDs': { 'type': 'array', 'items': { 'type': 'string' } }
                },
              'required': ['addonIDs', 'buyOptionID', 'description', 'name']
            },
          'RegisterOrganizationToEventOutput':
            {
              'properties':
                {
                  'eventRegistrationId': { 'type': 'string' },
                  'createdAt': { 'type': 'string', 'format': 'date-time' }
                }
            },
          'RegisterOrganizationToEventInput':
            {
              'properties':
                {
                  'eventId': { 'type': 'string' },
                  'organizationId': { 'type': 'string' },
                  'contactPersonId': { 'type': 'string' },
                  'contractLegalEntityName': { 'type': 'string' },
                  'contractAddressStreet': { 'type': 'string' },
                  'contractAddressZipCode': { 'type': 'string' },
                  'contractAddressCity': { 'type': 'string' },
                  'contractAddressCountry': { 'type': 'string' },
                  'billingOrganizationName': { 'type': 'string' },
                  'billingStreet': { 'type': 'string' },
                  'billingZipCode': { 'type': 'string' },
                  'billingCity': { 'type': 'string' },
                  'billingCountry': { 'type': 'string' },
                  'billingVat': { 'type': 'string' },
                  'billingReference': { 'type': 'string' },
                  'packageId': { 'type': 'string' },
                  'selectedAddonPackages': { 'type': 'array', 'items': { 'type': 'string' } },
                  'selectedAddons': { 'type': 'array', 'items': { 'type': 'string' } },
                  'participationNote': { 'type': 'string' },
                  'language': { 'type': 'string', 'enum': ['ENGLISH', 'GERMAN', 'ROMANIAN'] }
                },
              'required':
                [
                  'billingCity',
                  'billingCountry',
                  'billingOrganizationName',
                  'billingReference',
                  'billingStreet',
                  'billingVat',
                  'billingZipCode',
                  'contactPersonId',
                  'contractAddressCity',
                  'contractAddressCountry',
                  'contractAddressStreet',
                  'contractAddressZipCode',
                  'contractLegalEntityName',
                  'eventId',
                  'language',
                  'organizationId',
                  'packageId',
                  'participationNote',
                  'selectedAddonPackages',
                  'selectedAddons'
                ]
            },
          'SubmitPortraitInput':
            {
              'properties':
                {
                  'title': { 'type': 'string' },
                  'comment': { 'type': 'string' },
                  'industry': { 'type': 'string' },
                  'products': { 'type': 'string' },
                  'locationsWorldwide': { 'type': 'string' },
                  'locationsEurope': { 'type': 'string' },
                  'locationsGermany': { 'type': 'string' },
                  'revenueWorldwide': { 'type': 'string' },
                  'revenueEurope': { 'type': 'string' },
                  'revenueGermany': { 'type': 'string' },
                  'employeesWorldwide': { 'type': 'string' },
                  'employeesEurope': { 'type': 'string' },
                  'employeesGermany': { 'type': 'string' },
                  'graduates': { 'type': 'string' },
                  'desiredDisciplines': { 'type': 'string' },
                  'entryOptions': { 'type': 'string' },
                  'offersThesis': { 'type': 'boolean' },
                  'offersOutOfCountryWork': { 'type': 'boolean' },
                  'offersInternships': { 'type': 'boolean' },
                  'contactAddress': { 'type': 'string' },
                  'contactPersonStudents': { 'type': 'string' },
                  'contactPersonGraduates': { 'type': 'string' },
                  'website': { 'type': 'string' },
                  'additionalInformation': { 'type': 'string' },
                  'displayName': { 'type': 'string' },
                  'organization': { 'type': 'string' }
                },
              'required':
                [
                  'additionalInformation',
                  'comment',
                  'contactAddress',
                  'contactPersonGraduates',
                  'contactPersonStudents',
                  'desiredDisciplines',
                  'displayName',
                  'employeesEurope',
                  'employeesGermany',
                  'employeesWorldwide',
                  'entryOptions',
                  'graduates',
                  'industry',
                  'locationsEurope',
                  'locationsGermany',
                  'locationsWorldwide',
                  'offersInternships',
                  'offersOutOfCountryWork',
                  'offersThesis',
                  'organization',
                  'products',
                  'revenueEurope',
                  'revenueGermany',
                  'revenueWorldwide',
                  'title',
                  'website'
                ]
            },
          'RequestPortraitChangeInput':
            { 'properties': { 'feedback': { 'type': 'string' } }, 'required': ['feedback'] },
          'RejectPortraitInput':
            { 'properties': { 'feedback': { 'type': 'string' } }, 'required': ['feedback'] },
          'RequestLogoChangeInput':
            { 'properties': { 'feedback': { 'type': 'string' } }, 'required': ['feedback'] },
          'RejectLogoInput':
            { 'properties': { 'feedback': { 'type': 'string' } }, 'required': ['feedback'] },
          'RequestAdvertisementChangeInput':
            { 'properties': { 'feedback': { 'type': 'string' } }, 'required': ['feedback'] },
          'RejectAdvertisementInput':
            { 'properties': { 'feedback': { 'type': 'string' } }, 'required': ['feedback'] },
          'RegisterUserInput':
            {
              'properties':
                {
                  'externalUserId': { 'type': 'string' },
                  'fullName': { 'type': 'string' },
                  'email': { 'type': 'string' },
                  'position': { 'type': 'string' },
                  'phone': { 'type': 'string' }
                },
              'required': ['email', 'externalUserId', 'fullName', 'phone', 'position']
            },
          'CreateBuyOptionInput':
            {
              'properties':
                {
                  'name': { 'type': 'string' },
                  'packages':
                    {
                      'type': 'array',
                      'items':
                        {
                          '$ref': '#/components/schemas/CreateBuyOptionUseCasePackageTemplateInput'
                        }
                    },
                  'services':
                    {
                      'type': 'array',
                      'items':
                        {
                          '$ref': '#/components/schemas/CreateBuyOptionUseCasePackageItemTemplateInput'
                        }
                    }
                },
              'required': ['name', 'packages', 'services']
            },
          'CreateBuyOptionUseCasePackageItemTemplateInput':
            {
              'properties':
                {
                  'valueType': { 'type': 'string', 'enum': ['STRING', 'INTEGER', 'BOOLEAN'] },
                  'name': { 'type': 'string' },
                  'packageValues':
                    {
                      'type': 'array',
                      'items':
                        {
                          '$ref': '#/components/schemas/CreateBuyOptionUseCasePackageItemTemplateValuesInput'
                        }
                    }
                },
              'required': ['name', 'packageValues', 'valueType']
            },
          'CreateBuyOptionUseCasePackageItemTemplateValuesInput':
            {
              'properties': { 'packageName': { 'type': 'string' }, 'value': { 'type': 'string' } },
              'required': ['packageName', 'value']
            },
          'CreateBuyOptionUseCasePackageTemplateInput':
            {
              'properties':
                { 'name': { 'type': 'string' }, 'price': { 'type': 'integer', 'format': 'int32' } },
              'required': ['name', 'price']
            },
          'AddAddonPackageTemplateOutput':
            {
              'properties':
                {
                  'savedAddonPackage': { '$ref': '#/components/schemas/AddonPackageTemplateOutput' }
                }
            },
          'AddonPackageTemplateInput':
            {
              'properties':
                {
                  'purchasable': { 'type': 'boolean', 'example': true },
                  'title': { 'type': 'string', 'example': 'Printwerbung' },
                  'price': { 'type': 'integer', 'format': 'int32', 'example': 250000 },
                  'description':
                    { 'type': 'string', 'example': 'Effektive Werbung im Bereich des Campus' },
                  'label': { 'type': 'string', 'example': '-15%' },
                  'addons':
                    {
                      'type': 'array',
                      'items': { '$ref': '#/components/schemas/AddonTemplateInput' }
                    }
                },
              'required': ['addons', 'label', 'purchasable', 'title']
            },
          'GetPortraitTemplatesByOrgnizationOutput':
            {
              'properties':
                {
                  'portraitTemplates':
                    {
                      'type': 'array',
                      'items': { '$ref': '#/components/schemas/PortraitTemplateLiteJSON' }
                    },
                  'totalPages': { 'type': 'integer', 'format': 'int32' },
                  'totalElements': { 'type': 'integer', 'format': 'int64' },
                  'pageNumber': { 'type': 'integer', 'format': 'int32' },
                  'pageSize': { 'type': 'integer', 'format': 'int32' }
                }
            },
          'PortraitTemplateLiteJSON':
            {
              'properties':
                {
                  'id': { 'type': 'string' },
                  'title': { 'type': 'string' },
                  'displayName': { 'type': 'string' },
                  'lastModifiedAt': { 'type': 'string', 'format': 'date-time' }
                }
            },
          'GetPortraitLogosForOrganizationOutput':
            {
              'properties':
                {
                  'portraitLogos':
                    {
                      'type': 'array',
                      'items': { '$ref': '#/components/schemas/PortraitLogoOutput' }
                    },
                  'pageNumber': { 'type': 'integer', 'format': 'int32' },
                  'pageSize': { 'type': 'integer', 'format': 'int32' },
                  'totalPages': { 'type': 'integer', 'format': 'int32' },
                  'totalElements': { 'type': 'integer', 'format': 'int64' }
                }
            },
          'PortraitLogoOutput':
            {
              'properties':
                { 'name': { 'type': 'string' }, 'content': { 'type': 'string', 'format': 'byte' } }
            },
          'GetAllOrganizationsOutput':
            {
              'properties':
                {
                  'organizations':
                    {
                      'type': 'array',
                      'items': { '$ref': '#/components/schemas/OrganizationOutput' }
                    },
                  'pageNumber': { 'type': 'integer', 'format': 'int32' },
                  'pageSize': { 'type': 'integer', 'format': 'int32' },
                  'totalPages': { 'type': 'integer', 'format': 'int32' },
                  'totalElements': { 'type': 'integer', 'format': 'int64' }
                }
            },
          'GetMembersOutput':
            {
              'properties':
                {
                  'members':
                    {
                      'type': 'array',
                      'items': { '$ref': '#/components/schemas/GetOrgMembersOutputItem' }
                    },
                  'pageNumber': { 'type': 'integer', 'format': 'int32' },
                  'pageSize': { 'type': 'integer', 'format': 'int32' },
                  'totalPages': { 'type': 'integer', 'format': 'int32' },
                  'totalElements': { 'type': 'integer', 'format': 'int64' }
                }
            },
          'GetOrgMembersOutputItem':
            {
              'properties':
                {
                  'contactPersonId': { 'type': 'string' },
                  'contactPersonName': { 'type': 'string' },
                  'membershipType': { 'type': 'string' },
                  'email': { 'type': 'string' }
                }
            },
          'GetBillingAddressTemplatesOutput':
            {
              'properties':
                {
                  'billingAddressTemplates':
                    {
                      'type': 'array',
                      'items': { '$ref': '#/components/schemas/BillingAddressTemplateJSON' }
                    },
                  'totalPages': { 'type': 'integer', 'format': 'int32' },
                  'totalElements': { 'type': 'integer', 'format': 'int64' }
                }
            },
          'AllEventsOutput':
            {
              'properties':
                {
                  'events':
                    { 'type': 'array', 'items': { '$ref': '#/components/schemas/EventLiteJSON' } },
                  'page': { 'type': 'integer', 'format': 'int32' },
                  'size': { 'type': 'integer', 'format': 'int32' },
                  'totalPages': { 'type': 'integer', 'format': 'int32' },
                  'totalElements': { 'type': 'integer', 'format': 'int64' }
                }
            },
          'EventLiteJSON':
            {
              'properties':
                {
                  'id': { 'type': 'string' },
                  'name': { 'type': 'string' },
                  'location': { 'type': 'string' },
                  'projectHSG': { 'type': 'string' },
                  'dateFrom': { 'type': 'string', 'format': 'date' },
                  'dateTo': { 'type': 'string', 'format': 'date' }
                }
            },
          'EventJSON':
            {
              'properties':
                {
                  'id': { 'type': 'string' },
                  'notesId': { 'type': 'string' },
                  'name': { 'type': 'string' },
                  'status': { 'type': 'string', 'enum': ['UNPUBLISHED', 'PUBLISHED', 'ARCHIVED'] },
                  'projectHSG': { 'type': 'string' },
                  'location': { 'type': 'string' },
                  'dateFrom': { 'type': 'string', 'format': 'date' },
                  'timeFrom': { '$ref': '#/components/schemas/LocalTime' },
                  'dateTo': { 'type': 'string', 'format': 'date' },
                  'timeTo': { '$ref': '#/components/schemas/LocalTime' },
                  'comment': { 'type': 'string' },
                  'latestRegistration': { 'type': 'string', 'format': 'date' },
                  'notesCategory': { 'type': 'string' },
                  'descriptionNotes': { 'type': 'string' },
                  'contactMail': { 'type': 'string' },
                  'website': { 'type': 'string' },
                  'additionalLink': { 'type': 'string' },
                  'packages':
                    {
                      'type': 'array',
                      'items': { '$ref': '#/components/schemas/PackageJSONV2' },
                      'uniqueItems': true
                    },
                  'addons':
                    {
                      'type': 'array',
                      'items': { '$ref': '#/components/schemas/AddonPackageOutput' },
                      'uniqueItems': true
                    },
                  'createdAt': { 'type': 'string', 'format': 'date-time' },
                  'modifiedAt': { 'type': 'string', 'format': 'date-time' }
                }
            },
          'LocalTime':
            {
              'properties':
                {
                  'hour': { 'type': 'integer', 'format': 'int32' },
                  'minute': { 'type': 'integer', 'format': 'int32' },
                  'second': { 'type': 'integer', 'format': 'int32' },
                  'nano': { 'type': 'integer', 'format': 'int32' }
                }
            },
          'PackageItemJSON':
            {
              'properties':
                {
                  'id': { 'type': 'string' },
                  'name': { 'type': 'string' },
                  'valueType': { 'type': 'string', 'enum': ['STRING', 'INTEGER', 'BOOLEAN'] }
                },
              'required': ['name', 'valueType']
            },
          'PackageItemValueJSON':
            {
              'properties':
                {
                  'id': { 'type': 'string' },
                  'packageId': { 'type': 'string' },
                  'value': { 'type': 'string' },
                  'packageItem': { '$ref': '#/components/schemas/PackageItemJSON' }
                }
            },
          'PackageJSONV2':
            {
              'properties':
                {
                  'id': { 'type': 'string' },
                  'name': { 'type': 'string' },
                  'price': { 'type': 'integer', 'format': 'int32' },
                  'services':
                    {
                      'type': 'array',
                      'items': { '$ref': '#/components/schemas/PackageItemValueJSON' },
                      'uniqueItems': true
                    }
                }
            },
          'EventRegistrationAddonOutput':
            {
              'properties':
                {
                  'id': { 'type': 'string' },
                  'title': { 'type': 'string' },
                  'price': { 'type': 'integer', 'format': 'int32' },
                  'selected': { 'type': 'boolean' },
                  'label': { 'type': 'string' }
                }
            },
          'EventRegistrationAddonPackageOutput':
            {
              'properties':
                {
                  'id': { 'type': 'string' },
                  'purchasable': { 'type': 'boolean' },
                  'selected': { 'type': 'boolean' },
                  'title': { 'type': 'string' },
                  'description': { 'type': 'string' },
                  'price': { 'type': 'integer', 'format': 'int32' },
                  'label': { 'type': 'string' },
                  'eventId': { 'type': 'string' },
                  'addons':
                    {
                      'type': 'array',
                      'items': { '$ref': '#/components/schemas/EventRegistrationAddonOutput' }
                    }
                }
            },
          'EventRegistrationContactPersonOutput':
            {
              'properties':
                {
                  'fullName': { 'type': 'string' },
                  'email': { 'type': 'string' },
                  'phone': { 'type': 'string' }
                }
            },
          'EventRegistrationOrganizationOutput':
            {
              'properties':
                {
                  'name': { 'type': 'string' },
                  'email': { 'type': 'string' },
                  'phone': { 'type': 'string' }
                }
            },
          'GetEventRegistrationOutput':
            {
              'properties':
                {
                  'id': { 'type': 'string' },
                  'createdAt': { 'type': 'string', 'format': 'date-time' },
                  'modifiedAt': { 'type': 'string', 'format': 'date-time' },
                  'status':
                    { 'type': 'string', 'enum': ['CREATED', 'REJECTED', 'CONFIRMED', 'WITHDRAWN'] },
                  'advertisementStatus':
                    {
                      'type': 'string',
                      'enum': ['UPLOADED', 'CHANGES_REQUESTED', 'REJECTED', 'CONFIRMED']
                    },
                  'portraitStatus':
                    {
                      'type': 'string',
                      'enum': ['DRAFT', 'SUBMITTED', 'CHANGES_REQUESTED', 'REJECTED', 'CONFIRMED']
                    },
                  'logoStatus':
                    {
                      'type': 'string',
                      'enum': ['UPLOADED', 'CHANGES_REQUESTED', 'REJECTED', 'CONFIRMED']
                    },
                  'organizationComment': { 'type': 'string' },
                  'participationNote': { 'type': 'string' },
                  'contactPerson':
                    { '$ref': '#/components/schemas/EventRegistrationContactPersonOutput' },
                  'organization':
                    { '$ref': '#/components/schemas/EventRegistrationOrganizationOutput' },
                  'addonPackages':
                    {
                      'type': 'array',
                      'items':
                        { '$ref': '#/components/schemas/EventRegistrationAddonPackageOutput' }
                    }
                }
            },
          'GetEventRegistrationsForEventOutput':
            {
              'properties':
                {
                  'eventRegistrations':
                    {
                      'type': 'array',
                      'items': { '$ref': '#/components/schemas/GetEventRegistrationOutput' }
                    },
                  'pageNumber': { 'type': 'integer', 'format': 'int32' },
                  'pageSize': { 'type': 'integer', 'format': 'int32' },
                  'totalPages': { 'type': 'integer', 'format': 'int32' },
                  'totalElements': { 'type': 'integer', 'format': 'int64' }
                }
            },
          'BuyOptionLightOutput':
            {
              'properties':
                {
                  'id': { 'type': 'string' },
                  'name': { 'type': 'string' },
                  'packagesCount': { 'type': 'integer', 'format': 'int32' },
                  'servicesCount': { 'type': 'integer', 'format': 'int32' },
                  'active': { 'type': 'boolean' }
                }
            },
          'GetEventBuyOptionsOutput':
            {
              'properties':
                {
                  'eventId': { 'type': 'string' },
                  'buyOptions':
                    {
                      'type': 'array',
                      'items': { '$ref': '#/components/schemas/BuyOptionLightOutput' }
                    },
                  'pageNumber': { 'type': 'integer', 'format': 'int32' },
                  'pageSize': { 'type': 'integer', 'format': 'int32' },
                  'totalElements': { 'type': 'integer', 'format': 'int32' },
                  'totalPages': { 'type': 'integer', 'format': 'int32' }
                }
            },
          'GetAllAddonPackagesOutput':
            {
              'properties':
                {
                  'addonPackages':
                    {
                      'type': 'array',
                      'items': { '$ref': '#/components/schemas/AddonPackageOutput' }
                    },
                  'pageNumber': { 'type': 'integer', 'format': 'int32' },
                  'pageSize': { 'type': 'integer', 'format': 'int32' },
                  'totalPages': { 'type': 'integer', 'format': 'int32' },
                  'totalElements': { 'type': 'integer', 'format': 'int64' }
                }
            },
          'GetAddonPackageOutput':
            {
              'properties':
                {
                  'id': { 'type': 'string' },
                  'purchasable': { 'type': 'boolean' },
                  'title': { 'type': 'string' },
                  'description': { 'type': 'string' },
                  'price': { 'type': 'integer', 'format': 'int32' },
                  'label': { 'type': 'string' },
                  'eventId': { 'type': 'string' },
                  'addons':
                    { 'type': 'array', 'items': { '$ref': '#/components/schemas/AddonOutput' } }
                }
            },
          'EventTemplateLightOutput':
            {
              'properties':
                {
                  'id': { 'type': 'string' },
                  'name': { 'type': 'string' },
                  'createdAt': { 'type': 'string', 'format': 'date-time' },
                  'modifiedAt': { 'type': 'string', 'format': 'date-time' }
                }
            },
          'GetAllEventTemplateOutput':
            {
              'properties':
                {
                  'eventTemplates':
                    {
                      'type': 'array',
                      'items': { '$ref': '#/components/schemas/EventTemplateLightOutput' }
                    },
                  'pageNumber': { 'type': 'integer', 'format': 'int32' },
                  'pageSize': { 'type': 'integer', 'format': 'int32' },
                  'totalPages': { 'type': 'integer', 'format': 'int32' },
                  'totalElements': { 'type': 'integer', 'format': 'int64' }
                }
            },
          'GetEventRegistrationForOrganizationOutput':
            {
              'properties':
                {
                  'eventRegistrations':
                    {
                      'type': 'array',
                      'items': { '$ref': '#/components/schemas/GetEventRegistrationOutput' }
                    },
                  'pageNumber': { 'type': 'integer', 'format': 'int32' },
                  'pageSize': { 'type': 'integer', 'format': 'int32' },
                  'totalPages': { 'type': 'integer', 'format': 'int32' },
                  'totalElements': { 'type': 'integer', 'format': 'int64' }
                }
            },
          'GetOrgMembershipsOutput':
            {
              'properties':
                {
                  'memberships':
                    {
                      'type': 'array',
                      'items': { '$ref': '#/components/schemas/GetOrgMembershipsOutputItem' }
                    },
                  'pageNumber': { 'type': 'integer', 'format': 'int32' },
                  'pageSize': { 'type': 'integer', 'format': 'int32' },
                  'totalPages': { 'type': 'integer', 'format': 'int32' },
                  'totalElements': { 'type': 'integer', 'format': 'int64' }
                }
            },
          'GetOrgMembershipsOutputItem':
            {
              'properties':
                {
                  'organizationId': { 'type': 'string' },
                  'organizationName': { 'type': 'string' },
                  'organizationSlug': { 'type': 'string' },
                  'membershipType': { 'type': 'string' }
                }
            },
          'BuyOptionJSONV2Light':
            {
              'properties':
                {
                  'id': { 'type': 'string' },
                  'name': { 'type': 'string' },
                  'createdAt': { 'type': 'string', 'format': 'date-time' },
                  'modifiedAt': { 'type': 'string', 'format': 'date-time' }
                }
            },
          'GetBuyOptionsOutput':
            {
              'properties':
                {
                  'buyOptions':
                    {
                      'type': 'array',
                      'items': { '$ref': '#/components/schemas/BuyOptionJSONV2Light' }
                    },
                  'pageNumber': { 'type': 'integer', 'format': 'int32' },
                  'pageSize': { 'type': 'integer', 'format': 'int32' },
                  'totalPages': { 'type': 'integer', 'format': 'int32' },
                  'totalElements': { 'type': 'integer', 'format': 'int64' }
                }
            },
          'GetAllAddonPackageTemplatesOutput':
            {
              'properties':
                {
                  'addonPackageTemplates':
                    {
                      'type': 'array',
                      'items': { '$ref': '#/components/schemas/AddonPackageTemplateOutput' }
                    },
                  'pageNumber': { 'type': 'integer', 'format': 'int32' },
                  'pageSize': { 'type': 'integer', 'format': 'int32' },
                  'totalPages': { 'type': 'integer', 'format': 'int32' },
                  'totalElements': { 'type': 'integer', 'format': 'int64' }
                }
            },
          'GetAddonPackageTemplateOutput':
            {
              'properties':
                {
                  'id': { 'type': 'string' },
                  'purchasable': { 'type': 'boolean' },
                  'title': { 'type': 'string' },
                  'description': { 'type': 'string' },
                  'price': { 'type': 'integer', 'format': 'int32' },
                  'label': { 'type': 'string' },
                  'eventId': { 'type': 'string' },
                  'addons':
                    {
                      'type': 'array',
                      'items': { '$ref': '#/components/schemas/AddonTemplateOutput' }
                    }
                }
            },
          'JsonResponse':
            {
              'type': 'object',
              'additionalProperties': {},
              'properties':
                {
                  'response': { 'type': 'object', 'additionalProperties': {} },
                  'empty': { 'type': 'boolean' }
                }
            }
        },
      'securitySchemes':
        {
          'Auth0':
            {
              'type': 'openIdConnect',
              'name': 'OpenID Connect',
              'in': 'header',
              'bearerFormat': 'JWT',
              'openIdConnectUrl': 'https://dev-bonding-firmen.eu.auth0.com/.well-known/openid-configuration'
            }
        }
    }
}
